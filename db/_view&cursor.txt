뷰(View)
 - 테이블(들)을 기반으로 하여 select 쿼리의 결과를 객체로 만들어 놓은 것
 - 생성된 뷰의 사용법은 테이블과 동일
 - 생성법
 create view 뷰이름 as select 쿼리;

  - 뷰의 이름은 'v_'로 시작하여 테이블과 구분지음
  - 뷰는 테이블과 동일하게 동작하므로 수정이나 삭제도 가능은 함
  	단, 아주 특별한 경우가 아니면 뷰로 수정이나 삭제등의 작업을 하는 것은 바람직하지 않음
 - 뷰 생성시 반드시 명세서도 입력해 놓아야 함
 	뷰의 명세서에는 컬럼정보가 아닌 뷰를 생성시킨 select쿼리가 있어야 함

뷰의 장점
 - 보안에 도움이 됨
 	뷰를 이루는 컬럼들 외에 다른 컬럼에 대한 정보를 감추는 역할을 함
 - 복잡한 select 쿼리를 단순하게 만들어 줌
 	뷰를 생성하면 다음 부터는 결과를 얻기 위해 복잡한 테이블 기반 쿼리 대신 뷰를 이용하면 됨
	뷰를 사용할 때 마다 생성시 입력한 select 쿼리가 다시 실행되므로 항상 최신 정보를 유지함
	 - 즉, 뷰를 사용한다고 해서 속도가 빨라지지는 않음


커서(Cursor)
 - Stored Procedure나 Stored Function에서 사용하는 기능으로 일반 언어의 파일처리나 자바의 ResultSet과 비슷한 형태
 - 테이블에서 여러 행의 레코드를 쿼리로 select한 후 결과를 루프를 돌면서 한 행(레코드)씩 데이터에 접근하여 작업할 수 있게 해줌
 	직접 원하는 특정 레코드로 한 번에 이동하는 것이 아닌 처음부터 루프를 돌면서 접근해야 함

 - 문법 : 프로시저 내부에서의 사용

delimiter $$
create procedure 프로시저명()
begin
	declare is_end boolean default false;
	declare 커서명 cursor for 커서를 만들 select문;
	declare continue handler for not found set is_end = true;	-- 커서에서 더이상 데이터를 찾을 수 없게 되면 커서의 끝까지 루프를 돈 것으로 취급하여 is_end 변수의 값을 true로 변경

	open 커서명;			-- 지정한 커서를 사용하기 위해 열어줌

	cursorLoop:while true do	-- 따로 조건없이 무한 루프를 돌게 함
		
		fetch 커서명 into 변수명;	-- 현 레코드에 들어있는 데이터를 지정한 변수에 저장
		-- 여러 컬럼을 select해 올 경우 각 컬럼의 값이 들어갈 변수들을 선언 후 쉼표로 연결
		-- fetch 커서명 into 변수명1, 변수명2, ..., 변수명n;
		-- 단, select해오는 컬럼의 순서와 값을 저장할 변수의 순서가 동일해야 함(자료형 포함)

		작업할 실행문 or 쿼리문;

		if is_end then			-- 커서가 끝까지 루프를 돌았으면
			leave cursorLoop;	-- 지정한 레이블(cursorLoop)의 루프문을 빠져나감
		end if;

		작업할 실행문 or 쿼리문;

	end while;

	close 커서명;	-- 열었던 커서를 닫아줌
end $$
delimiter ;

 - 사용빈도는 자바의 ResultSet이 있으므로 상당히 낮은 편임
