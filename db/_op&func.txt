각종 연산자들 및 함수

연산자(Operateor)
산술연산자 : + - * / % mod
 - 사칙연산 및 나머지 연산자가 존재하며, 피연산자는 숫자형 데이터를 가진 컬럼 단위로 연산
 - 피연산자로 컬럼명을 사용하면 자동으로 칼럼의 각 레코드별로 연산을 수행함
 - 나머지 연산자로 % 대신 mod를 사용해도 됨

비교 연산자 : > >= < <= = <> like
 - like를 제외한 비교연산자들은 주로 숫자 데이터에 대한 조건 등 크기 비교를 위해 사용
 - '='대신 '=='를 '<>' 대신 '!='를 사용해도 되나 보통 DB에서는 '='와 '<>'를 사용함
 - > >= < <= 들은 날짜 데이터로도 크기 비교가 가능함
 - like : 같은 값인지 여부를 묻는 것이 아닌 포함되어 있는지를 검사하는 연산자
 	주로 검색 관련 작업에서 많이 사용됨
	like 연산자는 반드시 와일드카드인 '%'를 같이 사용해야 의미가 있음
	와일드 카드로는 모든 문자열을 의미하는 '%'와 한 글자를 의미하는 '_'가 있음
	와일드카드를 사용하지 않고 like 연산자를 사용하면 '='과 동일하게 동작함
- like 연산자 사용 예
	a like '%ab%' : a컬럼 데이터들 중 'ab'라는 문자열이 들어있는 모든 레코드
	a like 'ab%' : a컬럼 데이터들 중 'ab'라는 문자열로 시작하는 모든 레코드
	a like '%ab' : a컬럼 데이터들 중 'ab'라는 문자열이 끝나는 모든 레코드
	
	a like '_ab_' : a컬럼 데이터들 중 총 글자수가 4글자이면서 중간 두 글자가'ab'인 문자열이 들어있는 모든 레코드
	a like 'ab_' : a컬럼 데이터들 중 총 글자수가 3글자이면서 시작 두 글자가'ab'인 문자열이 들어있는 모든 레코드
	a like '_ab' : a컬럼 데이터들 중 총 글자수가 4글자이면서 끝의 두 글자가'ab'인 문자열이 들어있는 모든 레코드

논리 연산자 : not and or
 - 조건(들)에 대한 연산으로 and와 or은 여러 조건을 하나로 만들어 주는 연산자이며, not은 하나의 조건을 연산함
 - not > and > or 순으로 연산됨
 - 자바에서의 논리연산자(! && ||)도 사용가능하지만, 될 수 있다면 not, and, or을 사용함

 is 연산자
  - 특정 값이 아닌 객체와의 비교를 할 때 사용하는 연산자
  - 문법
 컬럼명 is 객체명	-- 지정한 컬럼이 특정 객체인지 여부를 리턴
  - 예 : a is null	-- a 컬럼이 null 이면(a 컬럼이 비었으면)
  - 예 : a is not null -- a 컬럼이 널이 아니면 (a클럼이 비어있지 않다면)

 between 연산자
  - 숫자나 날짜 범위를 조건으로 검색할 때 사용하는 연산자
  - 문법
 컬럼명 between 시작값 and 종료값;	--	지정한 컬럼에서 시작값 이상 종료값 이하의 데이터 추출
  - 단, 무조건 시작값 이상 종료값 이하만 검색되므로 초과나 미만의 경우 연산 불가
  - 예 : price 컬럼을 이용하여 1만원부터 5만원 까지의 데이터
  price between 10000 and 50000;
  price >= 10000 and price <= 50000

in 연산자
 - 주어진 보기에 속하는 지를 검색하는 연산자
 - 문법
컬럼명 in (보기1, 보기2, ... , 보기n)			--	해당 컬럼의 데이터가 지정한 보기들 중 있는지
 - 예1 : city 컬럼의 값이 서울, 부산, 대구, 광주 중에 있으면
	city in ('서울', '부산', '대구', '광주');
	city = '서울' or city = '부산' or city = '대구' or city = '광주';
 - 예1 : city 컬럼의 값이 서울, 부산, 대구, 광주 중에 없으면
	city not in ('
	서울', '부산', '대구', '광주');
	city <> '서울' and city = '부산' and city = '대구' and city = '광주';

내장함수
 - MySQL에 내장되어 있는 함수들로 여러 종류의 함수가 있음

집계함수
 - group by 절과 함께 사용하는 경우가 많은 함수들로 데이터들을 묶어서 하나의 값으로 만들 때 사용

 sum() 함수
  - 합계를 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 값들을 모두 더하여 리턴
  - 문법 : sum(더할 값이 들어있는 컬럼명)
  - 예 : sum(price) -> price 컬럼의 총 합(값이 없으면 null을 리턴)

 avg() 함수
  - 평균을 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 값들의 평균을 구하여 리턴
  - 문법 : avg(평균을 구할 값이 들어있는 컬럼명)
  - 예 : avg(prine) -> price 컬럼의 평균(값이 없으면 null을 리턴)
  	정수로 작업해도 실수값이 나오게됨

count() 함수
 - 개수를 구하는 함수로 괄호 안에 컬러명을 넣으면 해당 컬럼의 레코드 수를 리턴
 - 집계함수들 중 유일하게 숫자가 아닌 다른 종류의 데이터로도 사용할 수 있는 함수
 - 매개변수로 입력한 컬럼의 데이터들 중 null이 있으면 개수에서 빠지므로 정확한 개수를 구할 수 없음
 	그러므로, count() 함수로 매개변수로 사용할 컬럼은 null이 없는 컬럼(primary key, auto_increment, not null, default 등의 제약조건)을
	사용하거나 전체 컬럼을 의미하는 와일드카드 '*'을 사용함
 - 문법 : count(개수를 구할 컬럼명 or *)
 - 예 : count(name) -> 테이블에 있는 name 컬럼의 레코드 개수
 		count(*) -> 테이블에 있는 모든 레코드 개수
 - count() 함수 사용 시 개수를 계산할 값이 없으면 0을 리턴
 	다른 집계함수들은 값이 없으면 null을 리턴하지만 count() 함수는 0을 리턴

max() 함수
 - 최대값을 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 최대값을 구하여 리턴
  - 문법 : max(컬럼명) -> 지정한 컬럼의 데이터들 중 최대값을 리턴
  - 예 : max(price) -> price 컬럼에서 가장 큰 값을 리턴
  
min() 함수
 - 최대값을 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 작은값을 구하여 리턴
  - 문법 : mon(컬럼명) -> 지정한 컬럼의 데이터들 중 작은값을 리턴
  - 예 : mon(price) -> price 컬럼에서 가장 큰 작은을 리턴

 stdev() 함수 : 표준편차를 구하는 함수
 var_samp() 함수 : 분산을 구하는 함수

 흐름 제어 함수
  - 일반 프로그래밍 언어에서의 분기문을 함수로 만들어 놓은 것
  - 실제 분기문은 제어문으로서 존재하며 여기에서는 select문 등에서 사용하는 함수를 의미
  - 필수적으로 사용해야 하는 기능은 아니지만 쿼리에서 사용하지 않을 경우 웹 프로그래밍에서 처리해야 하므로 번거로워짐

if() 함수
 - 문법 : if(조건식, 참일때 할 일, 거짓일 때 할 일)
 - 조건식을 판단하여 참 또는 거짓일 경우 해야 할 일을 각각 지정해 놓음
 - select와 where 절에서 사용가능
 - 거짓일 경우 다시 if() 함수를 추가할 수 있어 여러개의 조건을 사용할 수 있음
 	if (조건식1, 참일 때 할 일, if(조건식2, 참일 때 할 일2, 거짓일 때 할 일2))

ifnull() 함수
 - 문법 : ifnull(수식1, 수식2)
 - 수식1이 null이면 수식2가 null이 아니면 수식1이 실행됨
 - 보통 수식1은 컬럼이 사용되어 컬럼에 null값이 있을 경우 수식2로 처리하게 됨
 - if(수식1 is jull, 수식1, 수식2)를 편하게 사용하기 위한 함수

nullif() 함수
- 문법 : nullif(수식1, 수식2)
- 수식1과 수식2가 같으면 null을, 다르면수식1을 리턴
- if(수식1 = 수식2, null, 수식1)을 편하게 사용하기 위한 함수

case-when-else-end 연산자
 - 문법 : case 수식 when 비교값1 then 처리1 when 비교값2 then 처리2 ... when 비교값n then 처리n else 기본처리 end;




 문자열 함수
ascii() 함수
 - 문법 : ascii(문자)
 - 지정한 문자의 아스키 코드값을 리턴
 - 아스키 코드값을 구할 문자는 영문자만 가능

char() 함수
 - 문법 : char(아스키코드값)
 - 지정한 아스키 코드값에 해당하는 문자를 리턴

* char_length() 함수
 - 문법 : char_length(문자열)
 - 지정한 문자열의 글자 개수를 리턴
 - 예) select char_length('abcd 가나다라');   -- 9
 - 한글과 영문의 차이없이 한 글자로 계산

length() 함수
 - 문법 : length(문자열)
 - 지정한 문자열의 바이트 수를 리턴
 - 예) select length('abcd 가나다라');   -- 17
 - 한글은 3, 영문은 1byte로 계산됨

* concat() 함수
 - 문법 : concat(문자열1, 문자열2, ... , 문자열n)
 - 각 문자열(숫자 포함)들을 합하여 하나의 문자열로 리턴
 - 예) select concat('ab', '가나다', 'cd');   -- ab가나다cd

concat_ws() 함수
 - 문법 : concat_ws(구분자, 문자열1, 문자열2, ... , 문자열n)
 - concat() 함수와 마찬가지로 문자열을 합치는 함수로 합칠 때 문자열 사이 사이에 구분를 넣어줌
 - 예) select concat_ws('-', '010', '1234', '5678');      -- 010-1234-5678

elt() 함수
 - 문법 : elt(위치번호, 문자열1, 문자열2, ... , 문자열n)
 - 위치번호에 해당하는 문자열을 리턴
 - 예) select elt(2, 'ab', 'cd', 'ef');      -- cd
 - 위치번호는 0이 아닌 1부터 시작되며 번호에 해당하는 문자열이 없으면 null을 리턴

field() 함수
 - 문법 : field(찾을 문자열, 문자열1, 문자열2, ... , 문자열n);
 - 문자열들 중 찾을 문자열이 있는 위치번호를 리턴
 - 예) select field('cd', 'ab', 'cd', 'ef');      -- 2
 - 못 찾으면 0을 리턴

find_in_set() 함수
 - 문법 : find_in_set(찾을 문자열, 문자열셋)
 - 문자열셋에서 '찾을 문자열'이 있는 위치번호를 리턴
 - 예) select find_in_set('ef', 'ab,cd,ef,gh'); -- 3
 - 문자열셋은 쉼표로 구분하며, 공백을 넣을 경우 공백까지 문자열로 취급
 - 위치번호는 0이 아닌 1번 부터 시작되며 찾는 문자열이 없으면 0을 리턴

* instr() 함수
 - 문법 : instr(문자열, 찾는 문자열)
 - 문자열에서 지정한 '찾는 문자열'의 위치번호를 리턴
 - 예) select instr('abcdef', 'bc'); -- 2
 - 위치번호는 0이 아닌 1번 부터 시작되며 찾는 문자열이 없으면 0을 리턴

locate() 함수
 - 문법 : locate(찾는 문자열, 문자열)
 - 문자열에서 지정한 '찾는 문자열'의 위치번호를 리턴
 - 예) select locate('bc', 'abcdef'); -- 2
 - 위치번호는 0이 아닌 1번 부터 시작되며 찾는 문자열이 없으면 0을 리턴
 - instr()함수와 동일한 기능을 가지며 매개변수의 순서만 다름

* format() 함수
 - 문법 : format(실수, 자릿수)
 - 실수에서 소수점 아래 자리를 지정한 '자릿수'에 맞춰 반올림 후 리턴
 - 예) select format(3.141592, 3); -- 3.142
 - 지정한 자릿수가 넘칠 경우 0으로 채워서 리턴
 - 예) select format(3.141592, 10); -- 3.1415920000
 - 자릿수에 0을 입력하면 정수부분만 추출하고 음수는 적용되지 않음

bin(), hex(), oct() 함수
 - 문법 : bin(10진수), hex(10진수), oct(10진수)
 - 지정된 10진수를 각각 2진수, 16진수, 8진수로 변환하여 리턴
 - 예) select bin(31), hex(31), oct(31); -- 11111 / 1F / 37

insert() 함수
 - 문법 : insert(문자열, 위치, 길이, 삽입할 문자열)
 - 문자열의 '위치'에 '길이'만큼 삭제 후 '삽입할 문자열'을 삽입하여 리턴
 - 예) select insert('abcdefghij', 3, 4, '@#'); -- ab@#ghij
 - 길이를 0으로 입력하면 삭제 없이 끼워넣기가 됨

lcase() 함수
 - 문법 : lcase(문자열)
 - 문자열에 있는 모든 영문을 소문자로 변환하여 리턴
 - 예) select lcase('abCD가나'); -- abcd가나

* left() 함수
 - 문법 : left(문자열, 길이)
 - 문자열의 왼쪽 부터 '길이'만큼 잘라내어 리턴
 - 예) select left('abcdefghij', 4); -- abcd

lpad() 함수
 - 문법 : lpad(문자열, 길이, 채울 문자열)
 - '문자열'을 '길이'만큼 늘린 후 왼쪽으로 '채울 문자열'을 채운 후 리턴
 - 예) select lpad('abcd', 7, '#'); -- ###abcd
 - '길이'가 '문자열'의 길이보다 짧으면 그냥 '문자열'을 '길이'에 맞춰 잘라냄

ltrim() 함수
 - 문법 : ltrim(문자열)
 - '문자열'의 왼쪽 공백을 제거하여 리턴
 - 예) select ltrim('   abc   '); -- 'abc   '
 - 오른쪽 공백은 무시함

* mid() 함수
 - 문법 : mid(문자열, 자를 위치, 자를 길이)
 - '문자열'의 '자를 위치' 부터 '자를 길이'만큼 잘라내어 리턴
 - 예) select mid('abcdefg', 4, 3); -- def

repeat() 함수
 - 문법 : repeat(문자열, 횟수)
 - '문자열'을 지정한 '횟수'만큼 반복함
 - 예) select repeat('ab', 3); -- ababab

replace() 함수
 - 문법 : replace(문자열, 찾을 문자열, 바꿀 문자열)
 - '문자열'에서 '찾을 문자열'을 찾아 '바꿀 문자열'로 변경하여 리턴
 - 예) select replace('abcdefghij', 'cd', 'zz'); -- abzzefghij
 - '찾을 문자열'이 없을 경우 원본 문자열이 리턴됨
 - '찾을 문자열'이 여러 번 나올 경우 모두 변경시킴

reverse() 함수
 - 문법 : reverse(문자열)
 - 문자열의 순서를 뒤집어 리턴
 - 예) select reverse('abcde'); -- edcba

right() 함수
 - 문법 : right(문자열, 길이)
 - 문자열의 오른쪽 부터 '길이'만큼 잘라내어 리턴
 - 예) select right('abcdefghij', 4); -- ghij

rpad() 함수
 - 문법 : rpad(문자열, 길이, 채울 문자열)
 - '문자열'을 '길이'만큼 늘린 후 오른쪽으로 '채울 문자열'을 채운 후 리턴
 - 예) select rpad('abcd', 7, '#'); -- abcd###
 - '길이'가 '문자열'의 길이보다 짧으면 그냥 '문자열'을 '길이'에 맞춰 잘라냄

rtrim() 함수
 - 문법 : rtrim(문자열)
 - '문자열'의 오른쪽 공백을 제거하여 리턴
 - 예) select rtrim('   abc   '); -- '   abc'
 - 왼쪽 공백은 무시함

space() 함수
 - 문법 : space(횟수)
 - 지정된 횟수만큼 공백을 리턴
 - 예) select concat('::', space(5), '::'); -- ::     ::

substr() 함수
 - 문법 : substr(문자열, 자를 위치, 자를 길이)
 - '문자열'의 '자를 위치' 부터 '자를 길이'만큼 잘라내어 리턴
 - 예) select substr('abcdefg', 4, 3); -- def
 - mid() 함수와 동일

substring() 함수
 - 문법 : substring(문자열, 자를 위치, 자를 길이)
 - '문자열'의 '자를 위치' 부터 '자를 길이'만큼 잘라내어 리턴
 - 예) select substring('abcdefg', 4, 3); -- def
 - mid() 함수와 동일

substring_index() 함수
 - 문법 : substring_index(문자열, 구분자, 횟수)
 - '문자열'에서 '구분자'가 '횟수'만큼 나오면 그 이후의 오른쪽 문자열을 삭제하여 리턴
   단, 횟수가 음수이면 오른쪽부터 계산하여 왼쪽 문자열을 삭제
 - 예1) select substring_index('cafe.naver.com', '.', 2); -- cafe.naver
 - 예2) select substring_index('cafe.naver.com', '.', -2); -- naver.com

* trim() 함수
 - 문법 : trim(문자열)
 - '문자열'의 양쪽 공백을 제거하여 리턴
 - 예) select trim('   abc   '); -- abc

ucase() 함수
 - 문법 : ucase(문자열)
 - 문자열에 있는 모든 영문을 대문자로 변환하여 리턴
 - 예) select ucase('abCD가나'); -- ABCD가나


수학관련 함수
abs() 함수
 - 문법 : abs(숫자)
 - 지정된 숫자의 절대값을 리턴
 - 예) select abs(-10);      -- 10

* ceiling(), ceil() 함수
 - 문법 : ceiling(실수), ceil(실수)
 - 지정된 실수를 소수점 첫째자리에서 올림하여 정수로 리턴
 - 예) select ceiling(3.14), ceil(3.14);      -- 4 | 4

conv() 함수
 - 문법 : conv(숫자, 이전 진법, 변경할 진법)
 - 지정된 숫자를 지정된 변경할 진법으로 변환하여 리턴
 - 예) select conv(11, 16, 10);      -- 17 (11이라는 16진수 숫자를 10진수로 변경하여 리턴)
   16진수인 경우 영문을 사용하려면 작은 따옴표로 묶어서 사용하면 됨

* floor() 함수
 - 문법 : floor(실수)
 - 지정된 실수를 소수점 첫째자리에서 내림하여 정수로 리턴
 - 예) select floor(7.8);      -- 7

mod() 함수
 - 문법 : mod(나누어 지는 수, 나누는 수)
 - 지정된 숫자들을 이용해 나눗셈을 한 후 나머지를 리턴
 - 예) select mod(10, 3), mod(10.1, 3);      -- 1 | 1.1

pow(), power() 함수
 - 문법 : pow(밑수, 지수), power(밑수, 지수)
 - 두 함수가 같은 동작을 하며 거듭제곱을 구하여 리턴
 - 예) select pow(3, 4), power(3, 4);      -- 81 | 81

rand() 함수
 - 문법 : 매개변수 없이 0이상 1미만의 난수를 리턴
 - 예) select rand(), floor(rand() * 10);   -- 0이상 1미만의 난수 | 0 ~ 9 사이의 난수

* round() 함수
 - 문법 : round(실수)
 - 지정된 실수를 소수점 첫째자리에서 반올림하여 정수로 변경
 - 예) select round(7.8);   -- 8

sign() 함수
 - 문법 : sign(숫자)
 - 지정된 숫자의 부호를 각각 양수는 1, 0은 0, 음수는 -1로 리턴
 - 예) select sign(10), sign(0), sign(-10);   -- 1 | 0 | -1

* truncate() 함수
 - 문법 : truncate(숫자, 자릿수)
 - 지정된 숫자를 지정한 자릿수에 맞춰 잘라냄
 - 예) select truncate(123.456, 2), truncate(123.456, 0), truncate(123.456, -2);
         -- 123.45 | 123 | 100
 - 자릿수에 음수를 입력하면 정수부분을 0으로 변경하여 리턴(10이나 100단위 등으로 표현 가능)


날짜 및 시간 함수
adddate(), date_add() 함수
 - 문법 : adddate(날짜, 더할 값), date_add(날짜, 더할 값)
 - 지정된 '날짜'에 '더할 값'을 더한 날짜를 리턴
 - 예1) select adddate('2022-01-30', interval 7 day);   -- 2022-02-06
 - 예2) select date_add('2022-01-30', interval -7 day);   -- 2022-01-23
 - 예3) select adddate('2020-01-30', interval 1 month);   -- 2020-02-29
 - 더할 값에 음수를 넣으면 이전 날짜를 구해줌(시간 계산도 가능 : 'yyyy-mm-dd hh:nn:ss')
 - 더할 값의 단위는 year, month, day, hour, minute, second 등이 있음
 - 월이나 년을 더할 경우 날짜가 맞지 않으면 최대한 비슷할 날로 지정함(예 : 2월달이나 윤달 등)

addtime(), subtime() 함수
 - 문법 : addtime(날짜 및 시간, 더할 시간), subtime(날짜 및 시간, 뺄 시간)
 - 지정한 '날짜 및 시간'에 지정한 값을 더하거나 뺀 날짜 및 시간을 리턴
 - 예)
   select addtime('2022-12-31 23:59:59', '1:1:1');   -- 2023-01-01 01:01:00
   select subtime('2022-12-31 23:59:59', '1:1:1');   -- 2022-12-31 22:58:58
   select addtime('23:59:59', '1:1:1');         -- 25:01:00 (날짜가 없으면 시각이 아닌 시간으로 연산)
   select subtime('23:59:59', '1:1:1');         -- 22:58:58 (날짜가 없으면 시각이 아닌 시간으로 연산)
   select addtime('2022-12-31 23:59:59', '-1:1:1');-- 2022-12-31 22:58:58
   select subtime('2022-12-31 23:59:59', '-1:1:1');-- 2023-01-01 01:01:00
   select addtime('23:59:59', '1:1');            -- 25:00:59 (시와 분으로 연산)
   select subtime('23:59:59', '1:1');            -- 22:58:59 (시와 분으로 연산)
   select addtime('23:59:59', '1');            -- 24:00:00 (하나만 있으면 초로 연산)
   select subtime('23:59:59', '1');            -- 22:58:59 (하나만 있으면 초로 연산)
 - 연산시 기존이 되는 날짜를 생략하면 시각이 아닌 시간(범위로서의 값)으로 연산됨

* curdate(), current_date(), current_date 함수
 - 오늘 날짜를 리턴하는 함수들로 매개변수는 없음
 - 리턴타입 : yyyy-mm-dd
 - 예) select curdate(), current_date(), current_date;   -- 2022-02-08 2022-02-08 2022-02-08

* curtime(), current_time(), current_time 함수
 - 현재 시각을 리턴하는 함수들로 매개변수는 없음
 - 리턴타입 : hh:mm:ss (24시각제)
 - 예) select curtime(), current_time(), current_time;   -- 10:50:00 10:50:00 10:50:00

* now(), sysdate(), localtime(), localtimestamp() 함수
 - 오늘 날짜 및 현재 시각을 리턴하는 함수들로 매개변수는 없음
 - 리턴타입 : yyyy-mm-dd hh:mm:ss (24시각제)
 - 예) select now(), sysdate(), localtime(), localtimestamp();   -- 2022-02-08 10:51:55 모두 동일

* year(), month(), day() 함수
 - 문법 : year(날짜), month(날짜), day(날짜)
 - 지정된 날짜에서 원하는 부분(연월일)만 추출하여 숫자로 리턴
 - 예) select year(now()), month(now()), day(now());      -- 2022  2  8

* hour(), minute(), second() 함수
 - 문법 : hour(시간), minute(시간), second(시간)
 - 지정된 시간에서 원하는 부분(시분초)만 추출하여 숫자로 리턴
 - 예) select hour(now()), minute(now()), second(now())   -- 10  57  44

* date(), time() 함수
 - 문법 : date(datetime형 데이터), time(datetime형 데이터)
 - 지정된 'datetime형 데이터'에서 날짜와 시간 부분을 따로 추출하여 리턴하는 함수
 - 예1) select date(now()), time(now());         -- 2022-02-08    11:01:01
 - 예2) select left(now(), 10), right(now(), 8);   -- 2022-02-08    11:01:01
 - datetime형 데이터 : yyyy-mm-dd hh:nn:ss 형식의 데이터
 - db에서의 날짜/시간 데이터는 문자열로도 사용이 가능하므로 left()나 right() 함수등을 사용할 수도 있음

datediff() 함수
 - 문법 : datediff(이후 날짜, 이전 날짜)
 - 두 날짜 사이의 간격으로 이전 날짜에서 이후 날짜까지의 일수를 리턴
 - 예) select datediff('2021-12-27', now()), datediff('2022-06-24', now());   -- -43   136
 - 두 인수중 앞의 값이 이전일 경우 음수로 값이 나옴

timediff() 함수
 - 문법 : timediff(이후 시간, 이전 시간)
 - 두 시간 사이의 간격으로 이전 시간에서 이후 시간까지의 시분초를 리턴
 - 예) select timediff('23:59:59', curtime()), timediff('00:00:00', curtime());-- 12:40:23 -11:19:36

dayofweek() 함수
 - 문법 : dayofweek(날짜)
 - 요일을 구하는 함수로 1 ~ 7 사이의 숫자로 리턴(1:일 ~ 7:토)
 - 예) select dayofweek(now());      -- 3

monthname() 함수
 - monthname(날짜)
 - 지정한 '날짜'의 월이름을 영문으로 리턴
 - 예) select monthname(now());      -- February

dayofyear() 함수
 - 문법 : dayofyear(날짜)
 - 지정한 '날짜'가 1년 중 몇 번째 일인지 리턴
 - 예) select dayofyear(now());      -- 39

last_day() 함수
 - 문법 : last_day(날짜)
 - 지정한 '날짜'의 해당 월의 말일을 리턴
 - 예) select last_day(now());      -- 2022-02-28

makedate() 함수
 - 문법 : makedate(연도, 숫자)
 - 지정한 '연도'에서 지정한 '숫자'만큼의 일(day)이 지난 날짜를 리턴
 - 예) select makedate(2022, 100);   -- 2022-04-10

maketime() 함수
 - 문법 : maketime(시, 분, 초)
 - 지정한 '시분초'를 이용하여 time형식으로 리턴
 - 예) select maketime(12, 34, 56);   -- 12:34:56

period_add() 함수
 - 문법 : period_add(연월, 개월수)
 - 지정한 '연월'에 지정한 '개월수'를 더한 연월을 리턴
 - 예) select period_add(202201, 8);   -- 202209

period_diff() 함수
 - 문법 : period_diff(연월1, 연월2)
 - '연월2'에서 '연월1'까지의 개월 수를 연산하여 리턴
 - 예) select period_diff(202312, 202202);   -- 22

quarter() 함수
 - 문법 : quarter(날짜)
 - 지정한 '날짜'가 4분기 중 몇 분기인지 리턴
 - 예) select quarter(now());   -- 1

time_to_sec() 함수
 - 문법 : time_to_sec(시간)
 - 지정한 '시간'을 초단위로 변환하여 리턴
 - 예) select time_to_sec('01:01:01');   -- 3661


시스템 정보 함수
database(), schema() 함수
 - 현재 사용중인 DB의 이름을 리턴
 - 예) select database(), schema();   -- test  test

found_rows() 함수
 - select문으로 조회한 데이터의 행(레코드)의 개수를 리턴
 - 단, 사용전에 행 수를 구할 select문을 먼저 실행해야 함
 - 게시판의 목록 화면에서 사용가능(단, count()함수를 이용한 방법을 주로 사용함)

row_count() 함수
 - 직전에 실행된 insert, update, delete 문에서 실행(추가, 수정, 삭제)된 행 수를 리턴
 - create나 drop문은 0을 리턴하고, select문은 -1을 리턴
 - 입력, 수정, 삭제의 확인 용도로 사용할 수 있으나, 자바 서블릿에 같은 기능의 메소드가 있으므로 보통은 서블릿의 메소드를 이용하여 작업함

version() 함수
 - 현재 MySQL의 버전을 리턴
 - 예) select version();      -- 8.0.31

sleep() 함수
 - 문법 : sleep(초)
 - 지정한 '초'만큼 쿼리의 실행을 일시 멈춤