자료(data) : 세상에 존재하는 모든 것을 자료라 하며, 컴퓨터에 한해서는 컴퓨터에 입력 할 수 있는 디지털 자료들로 한정지음

정보(information) : 자료들 중 필요한 것들을 가공하여 만들어낸 결과물로 컴퓨터의 사용목적이기도 함

데이터 베이스(database) : 자료 들을 모아 높은 집합으로, 단순히 모아 놓는 것에 그치지 않고, 나름의 규칙을 가지고 잘 정리해 놓은 것을 의미 
 - 잘 정리되었다는 의미는 검색이 용이하도록 데이터들을 정리했다는 의미가 됨

DBMS(DataBase Management System)
 - DB를 관리 및 운영하는 프로그램으로 여러 명의 사용자나 응용프로그램이 공유하고 동시에 접근이 가능하도록 관리해 주는 프로그램
 - 종류 : Oracle, MySQL, MS-SQL, MariaDB 등

  1. DBMS의 종류
  - 계층형 DBMS(Hierarchical DBMS)
	가장 처음 나온 DBMS 개념으로 1960년대에 시작되었으며, 각 계층은 트리 형태를 가지며 1:n 관계를 가짐
	단, 구축한 후 변경이 까다로워 검색은 빠르나 접근의 유연성이 부족하다는 단점이 있음

 - 망형 DBMS(Network DBMS)
 	계층형 DBMS의 문제점을 개선하기 위해 1970년 시작되었으며 1:1, 1:N, N:N 관계가 지원되어 빠른 데이터 추출이 가능해졌으나, 계층형과 마찬가지로 매우 복잡하여,
	개발자가 모든 구조를 이해해야만 개발이 가능하다는 단점이 있음

 - 관계형 DBMS(Relational DBMS)
 	1969년 E.F.Codd라는 학자가 수학 모델에 근거하여 고안한 방식으로 RDBMS라고도 함
	RDBMS의 핵심 개념은 '데이터베이스는 테이블(table)이라는 최소 단위로 구성된다. 그리고, 이 테이블은 하나 이상의 열(column or field)로 구성되어 있다.'
	모든 데이터는 테이블에 저장되는 구조로 다른 DBMS에 비해 쉽게 변화에 적응할 수 있는 구조이며, 유지보수 측면에서도 편리함
	대용량 데이터의 관리와 데이터 무결성을 보장함(각종 제약조건과 관계성을 통해 무결성 확보)
	단, 시스템 자원을 많이 차지하여 시스템을 전반적으로 느려지게 함(현재는 하드웨어의 발전으로 속도에서 큰 단점이 되지는 않음)

2. 테이블(table)
 - RDBMS의 기본 구성 요소이며, 모든 데이터가 저장되어 있는 곳으로 RDBMS는 반드시 하나 이상의 테이블이 존재해야 함
 - 테이블은 하나 이상의 열(column of field)로 구성되어 있음
 	각 열은 특별한 경우가 아니면, 데이터가 비어 있으면 안됨(권장 사항)
	빈 컬럼을 만들지 않기 위해 하나의 테이블이 아닌 여러 개의 테이블로 나누어 저장함으로써 불필요한 공간의 낭비를 줄이고 데이터 저장의 효율성을 보장함
	- 위처럼 여러 테이블로 나누는 것을 '정규화'라고 함
	나누어진 테이블 간의 관계를 기본키와 외래키를 사용하여 각 테이블의 컬럼간 관계를 맺어줌
 - 테이블에 데이터를 저장, 변경, 삭제 등을 하거나, 검색 등의 작업을 위해 sql이라는 DB 전용 언어를 사용함
 - 광계형 DB 이므로 테이블 간에 관계를 맺어 주는 것이 좋으나 필수는 아니어서 관계를 맺지 않는 경우도 있음(권장하지는 않음)

 1) 테이블에서 사용되는 기능 및 용어
  - 열(column or field) : 테이블의 구성요소로 각 테이블에는 최소 하나 이상의 열이 존재함
  - 열의 이름 : 컬럼명으로 각 열을 구분하기 위한 이름으로, 같은 테이블에서는 중복불가이며 다른 테이블일 경우 가능

  - 행(row or record) : 실질적으로 사용 가능한 데이터로 테이블의 한 행을 의미하며 record라는 용어를 많이 사용함(하나의 레코드가 그 테이블에서 무엇을 의미하는지 파악하는 것이 중요)

  - 데이터 타입(자료형) : 각 컬럼에 저장될 자료의 자료형으로, 정수, 실수, 날짜, 문자열 등의 자료형이 존재함
  	자바와는 다르게 문자열이 객체가 아니며 저장할 글자 개수를 제한할 수 있음

 - 기본키(primary key, pk, 주키)
 	중복불가, 필수입력, 인덱스 자동 생성(검색속도 향상)의 세 가지 제약조건을 자동으로 가짐
	기본키는 테이블당 하나만 지정할 수 있으며, 필요에 따라 하나의 컬럼이 아닌 여러개의 컬럼이 아닌 여러 개의 컬럼을 묶어서 기본키로 지정할 수도 있음
	테이블마다 모두 기본키를 지정하라는 것이 권장사항이나, 기본키 없이 생성되는 테이블도 있음
	기본키는 테이블에서 레코드들을 하나 하나 구분하는 용도로 사용됨(관계 설정에도 사용됨)
	단, 기본키는 생성 시 검색속도 향상을 위해 인덱스를 생성하므로 다른 기능인 입력, 수정, 삭제 시 느려지는 단점이 있음

 - 외래키(foreing key, fk, 보조키)
 	중복허용, 필수입력, 관계를 맺은 기본키의 값들 중 하나여야 하는 제약조건을 자동으로 가짐
	두 테이블 간의 관계 생성 시 만들어지는 키로 기본키와 다르게 한 테이블에 여러개의 다른 외래키 지정가능
	외래키와 관계를 맺은 상대 테이블의 컬럼은 반드시 기본키여야 하며 관계를 맺는 순간 제약조건이 성립됨(참조 무결성)
	- 외래키와 다른 테이블의 기본키가 관계를 맺어 1:N의 관계가 성립되는 순간 '참조 무결성'의 특징을 가짐
	참조 무결성 : 외래키로 지정한 컬럼에 들어가는 데이터는 무조건 관계를 맺은 PK에 해당하는 컬럼의 값들 중 하나여야 함
		PK에 해당하는 커럶의 값에 속하지 않거나 아예 값을 입력하지 않은 경우 참조 무결성에 위배되어 오류가 발생함(잘못된 데이터를 저장하느니 오류 발생)

SQL(Structed Query Language : 구조적 질의 어)
 - 에스큐엘, 쿼리, 시퀄 등으로 불리며 DBMS에 명령을 내리는 언어

 - sql은 DBMS 제작회사 별로 다른 부분도 있지만 표준이 있어 표준에 맞는 sql은 어떠한  DBMS에서도 동일하게 동작
 	단, 표준으로만 사용하기에는 한계가 있어, 각 DBMS별 전용 명령어를 사용하기도 함
	Oracle은 PL/SQL, MS-SQL은 T-SQL, MYSQL은 SQL이라고 함

 - sql로 객체의 생성, 수정, 삭제와 데이터의 입력, 수정, 삭제, 조회 등의 작업을 처리함
 - DB에서 사영되는 객체들 : database, table, index, view, stored procedure, function, trigger, cursor 등의 객체가 있음
 
  - 객체 생성 쿼리 : create 객체종류 객체명( 내용 );
  - 객체 수정 쿼리 : alter 객체종류 객체명 수정내용;
  - 객체 삭제 쿼리 : drop 객체종류 객체명;

 - 데이터 입력 쿼리 : insert into 테이블명(입력할 컬럼명들) values (입력할 값들);
 - 데이터 수정 쿼리 : update 테이블명 set 컬렴명 = 값[, 컬럼명 = 값, ...] [where 조건];
 - 데이터 삭제 쿼리 : delete from 테이블명 [where 조건];
 - 데이터 선택 쿼리 : select 컬럼명 from 테이블명 [where 조건...];

 MySQL의 컬럼에서 사용하는 자료형(data type)
  - null : 컬럼에 데이터가 없을 경우를 의미함

 숫자 형식 : DB에서는 숫자형 데이터에 문자열처럼 따옴표를 붙여서 사용해도 정상적으로 동작함
 정수
  - tinyint :			1byte. - 128~127 까지의 정수를 표현
  - smallint :			2byte. -32768~32767 까지의 정수를 표현
  - bediumint :			3byte. -8388608~8388607 까지의 정수를 표현
  - int : 4byte :		약 -21억~21억 까지의 정수를 표현
  - bigint : 8byte :	약 -900경~900경 까지의 정수를 표현
 실수
  - float : 4byte :		-3.40E + 28 ~ 1.17E + 38 소수점 아래 7자리까지 표현
  - double : 8byte :	-1.22E + 308 ~ 1.79E + 308 소수점 아래 15자리까지 표현

 문자열 형식
  - DB에서는 문자열을 작은 따옴표로 묶어서 표현(큰 따옴표는 아무 기능 없음)
  - DB에서는 문자열 타입의 컬럼 등에 숫자나 날짜 등 문자열이 아닌 데이터를 넣어도 됨

 - char(n) : 1~255자의 문자를 표현하는 고정길이 문자형으로 처리속도가 빠름
	n으로 지정한 수 만큼의 글자가 들어가며 숫자보다 글자수가 적으면 빈 공간으로 채워 지정한 글자수를 유지함
 - varchar(n) : 1~65535자의 문자를 표현하는 가변길이 문자형으로 속도는 char형 보다 느리나 text보다 빠름
	n으로 지정한 수 만큼의 글자가 들어가며 숫자보다 글자수가 적으면 남은 공간이 사라져 char형에 비해 공간 활용 효율 좋음

 - tinytext : 1~255자의 text 데이터
 - text : 1~65535자의 text 데이터
 - mediumtext : 1~16777215자의 text 데이터
 - longtext : 1~42949672595자의 text 데이터(최대 4GB)
 	text계의 자료형들은 하드디스크의 빈 공간을 채우면서 데이터가 입력되므로 속도는 느리지만 공간을 절약함
	text계의 자료형들에는 인덱스를 붙이지 않는 것이 좋다.

날짜/시간 데이터 형식
 - date : 3byte : 1001-01-01~9999-12-31 까지 'yyyy-mm-dd' 형식의 날짜만 저장
 - time : 3byte : -838:59:59.000000~838:59:59.000000 까지 'hh:mm:ss' 형식의 시간만 저장
 - datetime : 8byte : 1001-01-01 00:00:00 ~ 9999-12-31 23:59:59 까지 'yyyy-mm-dd hh:mm:ss' 형식으로 저장
 - year : 1byte : 1901~2155까지 'yyyy'형식으로 연도만 저장

 - 개발자에 따라 날짜/시간 데이터 형식을 따로 사용하지 않고 문자열로 처리하는 경우도 있음

BLOB 형식 : Binary Large Object - 이미지, 동영상, 문서파일 등의 대용량 이진 데이터
 - tinyblob : 1~255 크기의 blob 데이터
 - blob : 1~65535 크기의 blob 데이터
 - mediumblob : 1~16777215 크기의 blob 데이터
 - longblob : 1~4294967295 크기의 blob 데이터(최대 4GB)

 - 파일을 DB에 저장할 때 사용하는 자료형이나 보통은 파일을 DB에 저장하지 않음
