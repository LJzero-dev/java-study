SQL(Structed Query Language : 구조적 질의 어)
 - SQL은 DCL, DDL, DML의 세 종류로 분류됨
 - DCL(Data Control Language)은 데이터 제어언어로 사용자에게 권한을 부여하거나 빼앗을 때 사용되는 언어
 	grant 등의 쿼리로 DBA가 주로 사용함
 - DDL(Data Definition Language)은 데이터의 정의 언어로 db, 테이블, 뷰, 인덱스 등의 데이터 베이스 객체를 생성, 수정, 삭제 시 사용되는 언어
 	create, alter, drop 의 쿼리로 개발 초기 (DB 모델링)에 많이 사용됨
 - DML(Data Manipulation Language)은 데이터 조작어로 데이터의 조작(입력, 수정, 삭제, 검색)시 사용됨
 	DML이 사용되는 대상은 테이블의 레코드들이며, 반드시 테이블이 존재해야 함
	insert, update, delete, select 의 쿼리로 가장 많이 사용됨

1. DDL(Data Definition Language)
 - DB에서 사용하는 객체들(database, table, index, view, stored procedure, function, trigger, cursor )에 대한 생성, 수정, 삿제를 위한 명령으로 
 	여기서는 테이블 관련 DDL만 설명함

1) 테이블 생성
 - 테이블 생성 시 고려해야 할 점
 	테이블에서 하나의 레코드가 의미하는 바를 명확히 정한 후 작업해야 함
		- 예) 회원테이블 : 한 명의 회원정보를 의미, 상품테이블 : 하나의 상품 정보를 의미
		생성할 테이블에서 기본키로 사용할 컬럼은 무엇인지 결정 : 어떤 값으로 레코드들을 구분할지

 - 문법
create table 테이블명(
	컬럼명1 자료형 [제약조건(들)],
	컬럼명2 자료형 [제약조건(들)],
	...
	컬럼명n 자료형 [제약조건(들)],
	[기본키 및 외래키 제약조건(들)]
);
 - 제약조건 : 데이터의 무결성을 지키기 위해 설정하는 조건들을 의미
	primary key
	 - 특정 컬럼을 기본키로 지정하는 제약조건
	 - 사용법1 : 하나의 컬럼을 기본키로 지정할 경우
		컬럼명1 자료형 primary key -- 입력한 컬럼을 기본키로 지정함
	 - 사용법2 : 여러 컬럼을 묶어서 기본키로 지정할 경우
	 	테이블 생성 쿼리의 컬럼 정의 아래에 입력
		Constraint 기본키명 primary key (컬럼1, 컬럼2, ... , 컬럼n)
		 - 기본키명 : 해당 기본키에 붙일 이름으로 DB전체에서 중복불가이므로 보통 'pk_테이블명_컬럼명'
		 식으로 많이 사용함
		 - (컬럼1, 컬럼2, ... , 컬럼n) : 기본키로 사용할 컬럼들을 쉼표로 구분하여 입력

	foreign key
	 - 두 테이블 사이에 관계를 선언함으로써 데이터의 참조무결성을 보장해 주는 역할을 함
	 - 사용법 : 테이블 생성문의 가장 아래에 입력
	 	Constraint 외래키명 foreign key (컬럼명) references 테이블명(참조컬럼명)
			- 외래키명 : 해당 외래키에 붙일 이름으로 DB전체에서 중복불가이므로 보통 'fk_테이블명_컬럼명' 식으로 많이 사용함
			- (컬럼명) : 외래키가 될 현 테이블의 컬럼명
			- 테이블명 : 외래키가 참조할 컬럼이 들어있는 테이블명
			- (참조컬럼명) : 외래키가 참조할 외부 테이블의 특정 컬럼명
				참조하는 컬럼은 반드시 기본키 또는 unique 제약조건을 가진 컬럼이어야 함
		
	auto_increment
	 - int형 데이터를 가진 컬럼에 사용하는 제약조건으로 값을 1씩 증가시키는 제약조건
		(일련번호나 게시글 번호 등에서 많이 사용됨)
	 - 유일하게 직접 값을 넣을 수 없는 제약조건으로 DB에서만 값을 넣을 수 있음
	 - 따로 pk로 지정할 마땅한 컬럼이 없을 경우 pk로 사용되기도 함
	 - 중간에 번호가 삭제되면 그 번호는 계속 비어있게 됨
	 	컬럼명 int auto_increment -- 현 컬럼은 레코드가 추가될 때 마다 1씩 증가함
	 - 가장 최큰에 입력된 일련번호 확인 쿼리
	 	select last_insert_id();

	unsigned
	 - int형 데이터를 가진 컬럼에 사용하는 제약조건으로 부호를 사용하지 않고, 모두 양수로만 사용한다는 조건
	 - 양수로만 사용하므로 음수의 표현 범위까지 사용할 수 있어 사용범위가 두 배로 늘어남
	 - 사용법
	 	컬럼명 int unsigned
	
	unique
	 - 특정 컬럼에 중복불가 제약조건을 걸어줌
	 - PK는 아니지만 중복되면 안되는 컬럼일 경우 사용(예:민증번호, 휴대폰, 이메일 등)
	 - 외래키에서 PK가 아닌 컬럼을 참조할 경우 사용하는 제약조건이기도 함
	 - 사용법
	 	컬럼명 자료형 unique

	default
	 - 특정 컬럼에 대해 데이터를 입력하지 않을 경우 자동으로 들어갈 값을 지정해 놓는 제약조건
	 - 숫자나 문자열 등의 특정 값도 지정 가능하지만 now()와 같은 함수로 지정할 수도 있음
	 - 사용법
	 	컬럼명 자료형 default 기본값
		 - 기본값이 문자열이면 작은 따옴표로 묶어서 입력 : 빈 문자열도 가능('')
		 - 자료형이 int일 경우 기본값으로 0을 지정하는 경우가 많음
		 - 자료형이 datetime일 경우 기본값으로 now()를 지정하는 경우가 많음
		 - 기본값을 지정하지 않고 컬럼에 값을 넣지 않으면 무조건 null 값이 들어감

	null
	 - 특정 컬럼을 비워둘 수 있게 할건지 여부를 결정하는 제약조건
	 - 사용법
	 	컬럼명 자료형 null		--	현 컬럼은 비워둘 수 있음(기본)
	 	컬럼명 자료형 not null	--	현 컬럼은 비워둘 수 없음(필수 입력 컬럼)

 - 암묵적인 룰로 auto_increment 컬럼이 있으면 보통 가장 위에 넣고, 그 밑에 primary key 컬럼을 넣음
 	auto_increment 컬럼이 없으면 primary key 컬럼이 가장 위에 들어감


2) 테이블 수정
alter table 테이블명 수정할 내용;
 - 컬럼 추가
	alter table 테이블명 add 추가할 컬럼명 자료형 제약조건 [first | after 컬럼명] ;
		- first : 추가하려는 컬럼을 테이블의 첫번째 컬럼으로 추가하라는 의미
		- after 컬럼명 : 추가하려는 컬럼을 지정한 컬럼 뒤에 추가하라는 의미
		- 추가하려는 컬럼이 not null일 경우 default로 값을 주어야 함(기존 데이터 없을 시 상관 없음)

 - 컬럼명 및 자료형 변경
 	alter table 테이블명 change column 기존 컬럼명 새 컬럼명 자료형;
	 - 자료형 변경 시 더 작은 자료형으로의 변경은 불가

 - 컬럼 삭제
	alter table 테이블명 drop column 컬럼명;
	 - 삭제 시 해당 컬럼의 데이터들도 모두 삭제된다는 것을 주의해야 함
	 - 삭제 하려는 컬럼이 다른 테이블에서 참조하고 있으면 그 관계부터 정리해야 함

 - 컬럼의 키 제약조건 삭제
 	alter table 테이블명 drop [primary key | foregin key 외래키명];
	 - 테이블에서 기본키나 외래키의 제약조건을 삭제

3) 테이블 삭제
drop table 테이벌명;
 - 테이블의 데이터뿐만 아니라 테이블 자체를 삭제하는 명령
 - 관계가 설정되어 있는 테이블의 경우 삭제를 할며녀 모든 관계를 끊고 작업해야 함

 4) 임시 테이블
  - 임시 테이블은 잠시 동안만 사용하고 사라질 테이블을 의미하며, 뷰와는 상관없음
  - 삭제되는 시점
	개발자가 직접 drop table로 삭제할 경우
	workbench 등의 db 프로그램을 종료할 경우
	MySQL 서비스가 종료되거나 재시작할 경우
 - 문법
create temporary table 임시테이블명 (컬럼들 정의);
	일반 테이블 생성과 문법은 동일하며 'temporary'만 붙여주면 됨
	사용빈도가 높지는 않음

다른 객체들(index, view, stored procedure(리턴x), function(리턴o), trigger, cursor(메모리 많이 잡아먹음))에 대한 DDL은 각각의 기능에 따라 따로 정리할 것임

2. DML(Data Manipulation Language)
 - 데이터 조작어로 테이블이 존재해야 사용할 수 있음

 1) insert 문 : 데이터 입력
  - 문법1 : 기본
 inswer into 테이블명 (컬럼명1[, 컬럼명2, ... , 컬럼명n]) values(값1[, 값2, ... , 값n]);
  - 지정한 컬럼명들과 값들의 순서와 개수가 정확히 일치해야 함
  - 입력한 컬럼명들과 테이블의 컬럼명 순서가 동일할 필요는 없음
  - 입력, 수정, 삭제 중 가장 많은 오류가 발생하는 쿼리
  
  - 문법2 : 테이블의 모든 컬럼에 값을 넣을 경우
insert into 테이블명 values (값1[, 값2, ... , 값n]);
 - 모든 컬럼에 값이 들어갈 경우 컬럼명을 생략할 수 있음(값은 테이블의 등록된 컬럼 순서대로)

 - 문법3 : 다른테이블에 있는 데이터를 가져와서 insert 하는 방법
insert into 테이블명 (컬럼명1[, 컬럼명2, ... , 컬럼명n) select 컬럼명1[, 컬럼명2, ..., 컬럼명n]
from 테이블명;

 - 문법4 : 다른 테이블에 있는 데이터를 가져와서 insert하여 새 태이블을 생성할 수도 있음
 create table 테이블명 (select 컬럼명1[, 컬럼명2, ..., 컬럼명n] from 테이블명);
  - 생성되는 테이블의 컬럼은 select 문으로 받아온 컬럼들과 동일한 이름, 자료형, 제약조건 등을 가지게 됨

2) update 문 : 데이터 수정
 - 문법
update 테이블명 set 커럼명 1 = 값1[, 컬럼명2 = 값2 ... , 컬럼명n = 값n] [where 조건];
 - 수정하는 컬럼의 순서는 테이블의 컬럼 순서와 무관
 - where 절은 생략가능하지만 실제로는 거의 생략되는 경우가 없음(생략 시 모든 레코드가 변경)
	where 절의 경우 철저하게 조건을 검사해야 함(select 문을 이용하여 검사하면 됨)

 - 수정 시 다른 컬럼이나 본인 컬럼의 값을 참조해도 됨
	예) price = price * 0.9;	price = qty *1000;
 - 입력, 수정, 삭제 쿼리들 중 가장 느리며 수정된 값은 되돌릴 수 없으므로 where 절을 정확하게 지정해야 함

3) delete 문 : 데이터 삭제
 - 문법
delete from 테이블명 [where 조건];
 - 테이블 내의 데이터ㅡㄹ 삭제하는 명령으로 테이블 자체를 삭제하는 것은 아님
 - where 절은 생략가능하지만 실제로는 거의 생략되는 경우가 없음(생략 시 모든 레코드가 삭제)
	where 절의 경우 철저하게 조건을 검사해야 함(select 문을 이용하여 검사하면 됨)
 - DML 쿼리들 중 가장 쉽지만, 삭제된 값은 되돌릴 수 없으므로 where 절을 정확하게 지정해야 함

※ workbench에서는 update와 delete 사용 시 실수를 줄이기 위해 where절에 기본키로 조건을 주지 않으면 동작되지 않도록 옵션이 선택되어 있으며, 그 선택을 해제 한 후 사용가능함
 - 메뉴표시줄 [Edit] -> Preferences -> SQL Editor탭 화면의 최하단에 있는 [Safe Updates...] 메뉴의 체크박스 해제 후 재접속

 4) select 문 : 데이터 검색
  - 문법
 select [distinct] 컬럼명(들) 또는 *		--	검색해서 추출할 컬럼명 들 또는 전체
 from 테이블명(들)						--	검색할 데이터들이 들어있는 테이블(들)
 [
	[left | right] join					--	여러 테이블에서 검색할 경우 테이블 연결
	where 조건(들)						--	검색 조건 : 조건이 여러 개면 and나 or로 묶음
	group by 컬럼명(들)					--	지정한 컬럼을 기준으로 묶어서(동일한 값) 데이터를 추출
	having 조건(들)						--	group by 절에 필요한 조건(집계함수 사용가능)
	order by 컬럼명(들) [asc | desc]		--	정렬기준(asc : 오름차순-생략가능, desc : 내림차순)
	limit [시작인덱스, ]레코드 개수		--	추출할 레코드의 시작위치 및 개수를 지정(MySQL 전용 명령)
 ]
  - select 문의 여러 옵션절들은 모두 생략가능하나 사용할 경우 반드시 순서를 지켜야 함
  - distinct : 동일한 값을 가진 데이터들을 대표값으로 하나만 가져오게 하는 명령어
  - select 절의 컬럼명이 너무 길거나, 동일하거나, 계산식일 경우 컬럼명을 임의로 변경하여 사용할 수 있음
  	진짜 컬럼명이 변경되는 것은 아니며, 현 select 문의 결과에서만 임시로 바뀌어 보임
	위처럼 임의로 컬럼명을 변경하는것을 alias라 하며, '컬럼명 as 임시별칭'으로 별칭을 지정함
	단, 'as'는 생략해도 됨

 - join 절은 여러 테이블 이용 시 사용하는 문법으로 각 테이블들을 서로 엮을 수 있게 조건을 주는 영역이나 where 절에서 그 부분을 처리할 수도 있어 join절을 생략하는 경우도 많음
	단, outer join과 cross join일 경우 where절에서 처리할 수 없으므로 반드시 join절을 사용해야 함

 - group by 절은 레코드들을 같은 값끼리 묶어서 추출할 수 있게 해주는 명령
 	여러 컬럼명을 입력할 경우 가장 왼쪽이 컬럼이 1차 기준이 되며, 그 후 적혀있는 순서대로 기준이 됨
	주로 통계화면 등에서 많이 사용됨

 - having 절은 group by 절에서 지정한 컬럼들에 대한 조건을 넣는 영역
	where절이 select절의 컬럼들을 추출하기 위한 조건이라면 having은 group by 절에 대한 조건

 - order by 절을 생략하면 PK를 기준으로 오름차순으로 정렬되며, 특정 컬럼명을 입력하면 그 컬럼을 기준으로 정렬됨
 	여러 컬럼명을 입력할 경우 가장 왼쪽 컬럼이 1차 기준이 되며, 그 후 적혀있는 순서대로 기준이 됨
	각 컬럼명의 뒤에 asc 또는 desc로 오름차순과 내림차순을 정하는데 생략하면 asc로 지정
 
 - limit는 MySQL 전용 명령으로 다른 DBMS에서는 사용할 수 없으며, 시작 인덱스(0번 부터 시작)와 개수로 지정
 	시작 인덱스는 생략 가능하며 생략 시 첫번째 레코드부터 추출함(주로 게시판 목록에서 사용됨)
