JVM의 메모리 모델
 - 메소드 영역(method area) : 메소드, static - 특정 인스턴스에 속하지 않고 공용으로 사용되는 영역
 - 스택 영역(stack area) : 지역변수, 매개변수 - 프로그램의 실행과정에서 임시로 할당되었다가 메소드 종료 시 소멸하는 데이터들의 공간
 - 힙 영역(heap area) : 인스턴스 등이 저장되는 공간 - 스택영역의 데이터들 처럼 프로그램의 실행과정에서 생성되었다가
 소멸되는 영역으로 스택 영역에 같이 들어가지 않고 따로 힙 영역이 존재하는 이유는 지역변수나 매개변수 등과 소멸방법이나 시점이 다르기 때문

  - 인스턴스 소멸 시점 : null을 인위적으로 넣으면 소멸, 아니면 인스턴스가 생성된 메소드나 프로그램이 종료될 때 같이 소멸됨

예외(Exception)
 - 에러가 아닌 프로그램 실행중에 나타나는 예외적인 상황으로 컴파일은 되지만 실행 시 특정 상황에서만 문제가 생기는 경우
 - 개발자가 미리 알고 처리해야 하는 작업
 - 자바에서는 예외적인 상황의 처리를 위해 try-catch 제어문을 사용함

 - 문법
try {
	예외가 발생하는지 검사할 실행문들;
} catch(try문에서 발생한 예외클래스 매개변수) {
	발생한 예외에 대한 처리문;
}
[
catch(try문에서 발생한 예외클래스2 매개변수2) {
	발생한 예외에 대한 처리문2;
} ... catch(try문에서 발생한 예외클래스n 매개변수n) {
	발생한 예외에 대한 처리문n;
} finally {
	예외 발생 여부와 상관 없이 반드시 실행되는 영역
}
]

 - 하나의 try에 여러 catch문을 사용 가능
 - 단, 여러 catch문을 사용할 경우 반드시 상위클래스에 해당하는 예외는 아랫쪽에 배치해야 함
 	예) 모든 예외의 최상위클래스인 Exception 클래스는 항상 가장 마지막 catch문에서 사용해야 함
 - finally : try나 catch문 중간에 return으로 메소드를 종료시켜도 실행되는 영역 
 	예외 발생과 상관없이 반드시 실행되어야 하는 실행문을 입력하는 영역
	예) DB Connection 닫기, ResultSet 닫기 등의 기능을 finally 영역에서 사용함
 - 메소드들 중 선언부에 'throws 예외클래스[, 다른 예외클래스, ...]'로 정의된 메소드들은 반드시 try-catch 안에서 호출해야 함
 	일반적으로 DB관련 메소드들은 거의 대부분 'throws SQLException'으로 선언되어 있음

Math 클래스
 - java.lang 패키지에 있는 클래스 수학관련 기능을 제공하는 클래스
 - 생성자가 따로 없으며 모든 필드와 메소드들이 static으로 지정되어 있어 인스턴스 없이 접근할 수 있음

Wrapper 클래스들
 - 기본 자료형 데이터들을 자료형을 유지한 채 객체(인스턴스)로 만들어 주는 클래스들을 통틀어 Wrapper클래스라함
 - 종류 : java.lang 패키지안의 Boolean, Byte, Character, Double, Float, Integer, Long, Short
 - Boxing : 기본 자료형 데이터를 객체로 만드는 것
 - UnBoxing : 객체가 된 데이터를 다시 기본 자료형 데이터로 돌려 놓는 것
 - 정석은 new 명령을 사용하여 인서튼서를 생성해야 하지만, 직접 값을 넣는 것으로 boxing과 unboxing을 처리할 수 있음
 	예) Integer i1 = new Integer(10);	Integer i2 = 10;	//	두 명령은 동일함
	new 명령 사용 시 JDK 버전에 따라 경고(warning) 메시지가 발생할 수 있음

 - 생성자 : 대표로 Integer 클래스를 사용
Integer(int value) : 받아온 int형 데이터(value)를 Integer형 인스턴스로 생성
Integer(String s) : 받아온 문자열 데이터(value)를 Integer형 인스턴스로 생성
	다른 모든 Wrapper 클래스들의 생성자들도 본연의 자료형과 문자열을 매개변수로 사용하여 인스턴스를 생성
	매개변수의 문자열에는 단순 문자열이 아닌 해당 자료형처럼 생긴 문자열만 사용가능

 - 주요 메소드
static int parseInt(String s) : 받아온 문자열 데이터(s)를 int형 데이터로 변환 후 리턴
	모든 Wrapper 클래스에 parse자료형(String s)의 이름으로 존재하는 메소드
	예) int n = Integer.parseInt("1234");		//	문자열 "1234"를 int형 데이터 1234로 변환하여 변수 n에 저장

Static Integer valueOf(String s) : 받아온 문자열 데이터(s)를 Integer형 인스턴스로 변환 후 리턴
	모든 Wrapper 클래스에 동일한 이름으로 존재하는 메소드
	예) Integer n = Integer.valueOf("1234");		//	문자열 "1234"를 Integer형 인스턴스로 변환하여 변수 n에 저장

BigInteger 클래스
 - java.math 패키지에 있는 long형으로도 표현할 수 없는 정수를 표현 및 연산할 때 사용하는 클래스
 - 생성자
BigInteger(String val) : 받아온 문자열(val)을 BigInteger 인스턴스로 생성하여 리턴
 - 주요 메소드
리턴타입      메소드명 및 설명
BigInteger   abs() : 절대값을 구하여 BigInteger형으로 리턴
BigInteger   add(BigInteger val) : BigInteger 인스턴스에 지정한 val을 더한 값을 BigInteger형으로 리턴
BigInteger   divide(BigInteger val) : BigInteger 인스턴스에 지정한 val을 나눈 값을 BigInteger형으로 리턴
double      doubleValue() : BigInteger 인스턴스를 double형 데이터로 변환하여 리턴
float      floatValue() : BigInteger 인스턴스를 float형 데이터로 변환하여 리턴
int         intValue() : BigInteger 인스턴스를 int형 데이터로 변환하여 리턴
long      longValue() : BigInteger 인스턴스를 long형 데이터로 변환하여 리턴
BigInteger   mod(BigInteger m) : BigInteger 인스턴스에 지정한 m으로 나눈 나머지 값을 BigInteger형으로 리턴
BigInteger   multiply(BigInteger val):BigInteger 인스턴스에 지정한 val을 곱한 값을 BigInteger형으로 리턴
BigInteger   subtract(BigInteger val) : BigInteger 인스턴스에 지정한 val을 뺀 값을 BigInteger형으로 리턴

BigDecimal 클래스
 - java.math 패키지에 있는 정확한 실수 연산이 필요한 경우 사용하는 클래스
  - 생성자
BigDecimal(String val) : 받아온 문자열(val)을 BigDecimal 인스턴스로 생성하여 리턴

 - 주요 메소드
리턴타입      메소드명 및 설명
BigDecimal   abs() : 절대값을 구하여 BigDecimal형으로 리턴
BigDecimal   add(BigDecimal val) : BigDecimal 인스턴스에 지정한 val을 더한 값을 BigDecimal형으로 리턴
BigDecimal   divide(BigDecimal val) : BigDecimal 인스턴스에 지정한 val을 나눈 값을 BigDecimal형으로 리턴
double      doubleValue() : BigDecimal 인스턴스를 double형 데이터로 변환하여 리턴
float      floatValue() : BigDecimal 인스턴스를 float형 데이터로 변환하여 리턴
int         intValue() : BigDecimal 인스턴스를 int형 데이터로 변환하여 리턴
long      longValue() : BigDecimal 인스턴스를 long형 데이터로 변환하여 리턴
BigDecimal   mod(BigDecimal m) : BigDecimal 인스턴스에 지정한 m으로 나눈 나머지 값을 BigDecimal형으로 리턴
BigDecimal   multiply(BigDecimal val):BigDecimal 인스턴스에 지정한 val을 곱한 값을 BigDecimal형으로 리턴
BigDecimal   subtract(BigDecimal val) : BigDecimal 인스턴스에 지정한 val을 뺀 값을 BigDecimal형으로 리턴

Random 클래스
 - java.util 패키지에 있는 클래스로 0이상 1미만의 난수를 발생시키는 클래스
 - 실수로 값이 나오기 때문에 될 수 있으면 정수로 바꿔서 작업해야 함
 - 주로 복권 등의 예측불가 기능에서 많이 사용됨
 - 주요 메소드
리턴타입   메소드명 및 설명
boolean   nextBoolean() : boolean형 난수 리턴
double   nextDouble() : double형 난수 리턴
float   nextFloat() : float형 난수 리턴
int      nextInt() : int형 난수 리턴
int      nextInt(int bound) : 0이상 bound 미만의 int형 난수 리턴
long   nextLong() : long형 난수 리턴

Inner 클래스
 - 클래스 안에서 또다른 클래스를 정의하여 사용하는 것