JSP(Java Server Page)
 - 주석은 자바와 동일하게 사용할 수 있으며, html/css/js 사이에 삽입되어 동작함
 - '<%' 부터 '%>'까지로 영역을 지정하여 jsp 코드를 삽입함
 - 하나의 jsp파일도 서블릿으로 변환되어 컴파일 되므로 jsp 파일 하나가 하나의 자바 클래스를 의미함

1. JSP 지시어(Directive)
 - page, include, taglib 지시어로 3가지가 존재

1) page 지시어
 - Jsp페이지에 대한 각종 속성들을 지정하는 지시어로 한 페이지의 가장 위에 존재해야 함
 - 여러 속성을 가지고 있으며 그 중 import를 제외하면 모든 속성은 페이지당 한 번만 사용가능
 - 속성별로 따로 page지시어를 사용할 수도 있고, 여러 속성을 한 번에 입력할 수도 있음
 	여러 속성을 한 번에 입력할 경우 반드시 각 속성들의 앞에 띄어쓰기가 있어야 함

	<%@ page 속성명1="값1" 속성명2="값2" ... 속성명n="값n" %>

- 속성
language="java" : 기본값 java. 스크립트 요소에서 사용할 언어 설정
extends="클래스명" : 기본값 없음. 현재 페이지가 상속받을 클래스를 지정
import="패키지명.클래스명 or *" : 기본값 없음. 현재 페이지에 import할 클래스를 지정
session="true" : 기본값 true. 현 페이지에서 HttpSession 사용여부로 거의 사용안함
beffer="16bk" : 기본값 8kb. 페이지의 출력 버퍼의 크기를 설정(클수록 안정적이나 처음 로딩시 느림)
autoFlush="true" : 기본값 true. 출력 버퍼가 다 찼을 경우 처리
isThreadSafe="true" : 기본값 true. 다중 쓰레드의 동시 실행여부로 true를 입력하면 한 쓰레드가 완료될 때 까지 다른 쓰레드를 기다리게 한다는 의미
info="설명" : 기본값 없음. 현재 페이지에 대한 설명으로 주석같은 역할을 함
errorPage="경로 및 에러.jsp" : 기본값 없음. 현재 페이지에서 예외 발생시 처리할 때 필요
isErrorPage="false" : 기본값 false. 현재 페이지를 에러 페이지로 지정하는 속성
contentType="text/html; charset=utf-8" : jsp로 생성할 문서의 타입을 지정하는 방식
pageEncoding="utf-8" : 기본값 ISO-8859-1. 현재 페이지의 문자 인코딩 설정으로 유니코드인 'utf-8'로 설정

2) include 지시어
 - 현재 페이지에 다른 jsp나 html 파일을 원하는 위치에 삽입하는 지시어
 - 보통은 공용(상단메뉴, 사이드메뉴, 카피라이트 등)으로 사용하는 파일등을 include하여 사용함
 - 문법
<%@ include file="경로 및 파일명" %>

 - 삽입된 파일들은 별도로 따로 컴파일되어 합쳐지는 것이 아닌 삽입된 파일의 소스코드 자체가 해당 jsp파일에 복사되어 추가되므로 컴파일은 마지막에 한 번만 이루어짐
 - include 지시어는 중복 사용이 가능하여 원하는 만큼 파일을 삽입할 수 있고, include되는 파일내에서 다른 파일을 또 include할 수도 있음

 - 해당 페이지나 include된 파일에서 선언한 변수나 인스턴스들도 모두 공유할 수 있음
 	단, 선언한 곳보다 위에서는 사용할 수 없음

3) taglib 지시어
 - JSTL(JSP Tag Library)이나 커스텀 태그 등 라이브러리를 JSP에서 사용할 때 접두사를 지정해 주는 지시어
 - uri 속성과 prefix 속성 두 가지로 이루어짐
 - 문법
<%@ taglib uri="해당URI" prefix="접두사" %>

2. JSP 스크립트 요소
 - JSP 페이지에 자바 코드를 삽입하기 위해 사용되는 기능
 - 선언문(Declareation), 스크립틀릿(Scriptlet) 표현식(Expression)으로 나뉨

1) 선언문
 - JSP 페이지내에서 멤버변수나 멤버메소드를 선언하기 위해 사용되는 구문
 - 선언문에서 선언한 변수는 멤버변수로 인식되어 페이지의 모든 곳에서 참조가능
 	선언된 위치가 호출 또는 참조되는 위치보다 아래에 있어도 정상적으로 동작함
	include된 파일에서 선언문을 이용해 선언해도 상고나없이 멤버변수로 사용가능
	다만 보통 선언 및 정의나 초기화등은 파일 상단에서 처리하는것이 보기 좋음
 - 문법
 <%!
 멤버변수나 메소드를 선언 및 정의하는 영역
 %>

2) 스크립틀릿
 - 서블릿에서 html등의 코딩이 어려워서 개발된 방식으로 html 태그들 사이에서 사용할 수 있으며 원하는 위치 어디에서든 사용가능
 - 선언문과 다르게 스크립틀릿에서 선언한 변수는 선언한 곳 아래에서만 사용가능
 - 문법
<%
자바코드
%>

3) 표현식
 - 변수나 메소드의 리턴값 또는 수식을 브라우저에 출력하기 위해 사용하는 구문
 - 하나의 표현식 태그 내의 구문 전체가 하나의 print() 메소드의 인수로 들어감
 - 표현식 내부에서는 세미콜론을 사용하면 안됨
 - 문법
<%=변수 or 메소드리턴값 or 수식 등의 출력할 값%>
 - 출력할 값이 하나일 경우, <% out.println(출력할 값); %>을 사용하는 것보다 간편하게 출력할 수 있음

3. 내장객체
 - JSP에서 따로 import하지 않고도 사용할 수 있는 객체(클래스)들로 서블릿에서는 직접 import하여 인스턴스를 생성하거나 매개변수로 받아와야 함
 - JSP에서는 자동으로 미리 인스턴스(이름도 정해져 있음)가 생성되어 있음

 1) request 객체
  - javax.servlet.http.HttpServletRequest 클래스의 인스턴스
  - 사용자의 요청 정보(url) 및 전송 정보(컨트롤이나 쿼리스트링 등을 통해 서버로 보내는 데이터)가 들어있는 객체
  - 주요 메소드
리턴타입			메소드명 및 설명
String			getParameter(String name)		: name의 이름으로 지정된 컨트롤 또는 매개변수의 값을 문자열로 리턴하는 메소드로 해당 매개변수가 없으면 null
												: 컨트롤의 이름이 틀리거나 값이 없으면 null을 리턴하나 text와 password, textarea 등은 값이 없으면 null이 아닌 빈 문자열을 리턴
String[]		getParmeterValues(String name)	: name의 이름으로 지정된 컨트롤 또는 매개변수의 값들을 문자열 배열로 리턴하는 메소드로 같은 이름의 매개변수가 여럿 있을 경우 사용됨
												: 같은 이름의 컨트롤이 여럿 있을 경우에도 해당하며, 이 때 같은 이름의 컨트롤들이 반드시 같은 종류일 필요는 없음
Enumeration		getParameterNames()				: 전달된 모든 파라미터의 이름들을 java.util.Enumeration 형 인스턴스로 리턴
												: Enumeration 안에 들어가는 데이터는 제네릭으로 String만 들어가도록 정해져 있음

 - 헤더 관련 메소드
리턴타입			메소드명
String			getHeader(String headerName)	: http 요청 헤더에 headerName으로 지정된 이름으로 할당된 값을 리턴하며, 없으면 null
Enumeration		getHeaderNames()				: http 요청 헤더에 있는 모든 헤더의 이름들을 java.util.Enumeration 형 인스턴스로 리턴
int				getIntHeader(String headerName) : http 요청 헤더에 headerName으로 지정된 이름으로 할당된 값을 int 형으로 리턴하며, int로 변환할 수 없을 경우 NumberFormatException이 발생하고, 지정된 이름이 없으면 -1을 리턴

 - 쿠키, URL/URI, 요청방식 관련 메소드들
리턴타입			메소드명 및 설명
Cookie[]		getCookies		: 헤더에 포함된 쿠키들을 javax.esrvlet.http.Cookie 형 인스턴스 배열로 리턴
String			getServerName()	: 서버의 도메인명을 리턴
int				getServerPort()	: 서버의 포트번호를 리턴
StringBuffer	getRequestURL()	: 요청 URL을 StringBuffer형 인스턴스로 리턴
String			getRequestURI()	: 요청 URI를 String형 인스턴스로 리턴
String			getQueryString(): 요청에 사용된 쿼리스트링을 리턴
String			getRemoteHost()	: 클라이언트의 호스트 이름을 리턴
String			getRemoteAddr()	: 클라이언트의 IP주소를 리턴
String			getProtocol()	: 요청에 사용된 프로토콜 이름을 리턴
String			getMethod()		: 요청에 사용된 요청 방식(GET, POST)을 리턴
String			getContextpath(): 해당 페이지의 경로를 리턴

2) response 객체
 - javax.servlet.http.HttpServletResopnse 클래스의 인스턴스
 - 사용자의 요청에(request)에 대한 응답(response)을 나타내는 객체
 - 주요 메소드
리턴타입			메소드명
void			setHeader(String headerName, String headerValue)	: 응답에 포함될 헤더 정보에 headerName의 이름으로 headerValue 값을 추가
void			addCookie(Cookie cookie)							: javax.servlet.http.Cookie 타입의 인스턴스를 응답 헤더에 추가
void			sendRedirect(String url)							: 지정된 url로 이동시킴
																	- 단, sendRedirect()로 이동 시 쿼리스트링에 한글이 있을 경우 깨질 위험이 있음
void			setContentType(String type)							: 응답할 페이지의 contentType을 설정

3) pageContext 객체
- javax.servlet.jsp.PageContext 클래스의 인스턴스
- 다른 내장 객체를 리턴받거나 현재 페이지의 요청과 응답의 제어권을 다른 페이지로 넘겨주는데 사용됨
 - 주요 메소드
리턴타입			메소드명
ServletRequest	getRequest()		: 사용자의 요청 정보를 담은 객체(request)를 리턴
ServletResponse	getResponse()		: 사용자의 요청에 대한 응답 정보를 담은 객체(response)를 리턴
JspWriter		getOut()			: 응답 출력 스트림 객체(out)를 리턴
Object			getServletConfig()	: 서블릿의 초기 설정 정보를 담은 객체(config)를 리턴
HttpSession		get(Session()		: 세션 객체(session)를 리턴
* void			forward(String url)	: 현재 페이지의 요청과 응답에 대한 제어권을 url로 지정된 페이지로 영구적으로 넘김, 제어권을 넘긴다는 것은 request와 response 객체를 forward()로 이동한 곳(파일)에서 자유롭게 사용할 수 있다는 의미
void			include(String url)	: 현재 페이지의 요청과 응답에 대한 제어권을 url로 지정된 페이지에 일시적으로 넘김
									: include된 페이지의 처리가 끝나면 제어권은 다시 원래의 페이지로 돌아옴, page지시어의 include와는 다르게 겉의 파일에서 선언한 변수 등을 include된 파일에서는 사용할 수 없음

4) session 객체(있어야 로그인 이 가능함)
 - javax.servlet.http.HttpSession 클래스의 인스턴스
 - 기본적으로 요청과 응답 후 끊어지는 웹의 특성상 클라이언트의 정보를 유지하기 위해 제공되는 기능
 - 웹브라우저에 동속적인 객체로 브라우저의 탭을 종료하는 것은 세션객체에 아무런 영향을 미치지않고, 브라우저를 종료해야 세션객체가 소멸됨
 - 세션객체는 사용자가 다른 요청을 통해 서버에 연결하지 않을 경우 자동으로 특정 시간(보통 20~30분)이 지나면 소멸됨
 - 세션 정보(속성 포함)는 웹서버의 메모리에 존재하므로 지나치게 남발하면 웹서버의 속도가 느려질 수도 있음

- 주요 메소드
리턴타입			메소드명 및 설명
String			getId()											: 해당 세션의 세션ID를 문자열로 리턴, 세션ID는 자동으로 생성 및 할당되며, 유니크한 값임
*Object			getAttribute(String att_name)					: 세션의 속성들 중 지정한 이름(att_name)의 속성 값을 리턴 - Object로 받아오기 때문에 반드시 형변환 후 사용해야 함
long			getCreationTime()								: 1970/01/01 00:00:00 부터 세션이 생성된 순간까지의 시간을 밀리초로 리턴
long			getLastAccessedTime()							: 1970/01/01 00:00:00 부터 세션에 마지막 접근한 시간을 밀리초로 리턴
int				getMaxInactiveInterval()						: 사용자의 요청이 없을 경우 세션을 유지하도록 지정된 시간을 초로 리턴
void			invalidate()									: 세션의 모든 속성(attribute) 값들을 삭제한 후 세션 강제 종료 - 로그아웃에 주로 사용되며, 강제 종료 후 다시 다른 세션을 브라우저에 부여
boolean			isNew()											: 새로 생성된 세션이면 true, 기존의 세션이면 false를 리턴
*void			removeAttribute(String att_name)				: 지정한 이름의 속성값을 삭제
*void			setAttribute(String att_name, Object att_value)	: 지정된 이름과 값으로 세션에 속성 추가
void			setMaxInactiveInterval(int second)				: 세션의 유지시간을 초단위로 지정(기본값은 1800초)


5) application 객체
 - 서버의 정보와 서버측 자원에 대한 정보를 구할 수 있는 객체
 - 사이트당 하나만 생성되는 객체로, 사이트 전체에서 자원을 공유할 때 사용(방문자 수, 각종 통계 등에서 사용됨)
 - 웹서버에 종속적인 객체로, 웹서버 종료하지 않는 이상 객체는 계속 살아있음
 	그러므로, application 객체를 많이 사용하면 사이트가 느려질 수도 있음

- 주요 메소드
리턴타입			메소드명 및 설명
int				getMajorVersion()			: Servlet API의 major 버전
int				getMinorVersion()			: Servlet API의 minor 버전
String			getServerInfo()				: 웹서버의 이름과 버전을 리턴
String			getRealPath(String path)	: 지정한 경로를 서버의 실제 파일 시스템상 경로로 리턴
java.net.URL	getResource(String path)	: 지정한 경로를 URL 객체로 리턴


※ java(jsp)로 파일을 이동시키는 방법
1) redirect 방법
 - response 객체의 sendRedirect(String url) 메소드를 이용하여 이동시키는 방법
 - 이전 페이지의 request와 response 객체가 이동하는 페이지에서는 필요 없는 경우 사용(일반적인 경우)
 - 쿼리스트링에 한글이 있을 경우 깨질 위험이 있음

2) dispatch 방법
 - pageContext 객체의 forward(String url) 메소드를 이용하여 이동시키는 방법
 - 이동해도 주소창의 url이 변경되지 않고, 요청(request)과 응답(response) 정보에 대한 제어권을 이동한 페이지로 넘김 : 이전 페이지의 request와 response 객체를 이동하는 페이지에서 자유롭게 사용할 수 있음
 - 주로 모델2(MVC)에서 자주 사용됨

 - 두 방식 모두 웹 히스토리에 남지 않는 방식으로 브라우저의 '뒤로 가기'가 안됨


4) 영역(scope) 객체와 속성(attribute)
 - 내장 객체들 중 application, *session, *request, page 객체들은 해당 객체가 정의된 유효 범위 안에서 필요한 데이터들을 저장하고 읽어 들임으로써 서로 공유할 수 있는 특정 영역을 가지고 있음

 - 공용되는 데이터들을 속성(attribute)이라 하고, 속성을 공유하는 유효범위를 영역(scope)이라 함

 - 각 객체의 유효범위(영역)
 	application : 해당 웹사이트가 실행되고 있는 동안 사용할 수 있음
	 - 웹서버를 끄지 않는 이상 모든 페이지에서 사용가능
	 - 페이지에 상관없이 데이터를 유지할 수 있으며, 해당 사이트에 들어온 모든 클라이언트(브라우저)가 동일한 값을 공유
	 - 많이 사용하면 웹서버에 무리를 줄 수 있으며, 실제 사용 빈도는 낮음

	session : 세션이 유지되는 동안 속성을 사용할 수 있음
	 - 세션이 끊어지지 않는 이상 모든 페이지에서 사용가능
	 - 페이지에 상관없이 데이터를 유지할 수 이씅며, 해당 사이트에 들어온 모든 클라이언트(브라우저) 별로 다른 값을 가짐
	 - 주로 로그인 등에서 사용됨(지나치게 남발하는 것은 지양해야 함)

	request : 클라이언트의 요청이 처리되는 동안 속성을 사용할 수 있음
	 - 요청을 받은 페이지와 제어권을 받은 페이지(dispatch방식으로 이동한 페이지)에서도 사용가능
	 
	page : 해당 페이지 내에서만 속성을 사용할 수 있음
	 - page객체가 아닌 pageContext 객체를 통해 속성을 사용
	 - 실제 사용 빈도는 낮음

 - 속성 주요 메소드 : 네 영역 객체(application, session, request, page)에 동일하게 정의도어 있음
- 주요 메소드
리턴타입			메소드명 및 설명
*Object			getAttribute(String key)				: 지정한 key에 해당하는 속성값을 리턴 - Object로 받아오기 떄문에 반드시 형변환 후 사용해야 함 : 없으면 null을 리턴
*void			removeAttribute(String key)				: 지정한 key에 해당하는 속성값을 삭제
*void			setAttribute(String keye, Object obj)	: key의 이름으로 obj값을 해당 객체의 속성으로 추가
Enumeration		getAttributeNames()						: 객체내의 모든 속성들의 이름을 Enumeration 타입으로 리턴


