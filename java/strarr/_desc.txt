오버로딩(overloading)
 - 한 클래스 내에서 동일한 이름의 메소드를 여럿 정의하는 것
 	메소드 호출 시 각 메소드별로 구분이 가능하면 동일한 이름으로 메소드들을 정의할 수 있음
 - 메소드의 매개변수의 자료형이나 개수가 다르면 같은 이름으로 정의해도 됨
 	예) test(), test(10), test(10.2), test(10, 2), ...
	단, 리턴타입이 다른 걸로는 오버로딩이 안됨
 - 생성자도 오버로딩이 가능함 : 여러 가지 방법으로 해당 클래스의 인스턴스를 생성할 수 있게 됨

this 명렁어
 - 현재 생성되고 있는 인스턴스를 의미하는 명령
 - this.변수명 : 해당 변수는 멤버변수라는 것을 의미(상수도 마찬가지)
 - this([매개변수]) : 현재 실행되고 있는 생성자에서 오버로딩된 다른 생성자를 호출(생성자 안에서만 사용가능)

문자열(String)
 - 여러 문자들을 의미하는 자료형으로 자바에서는 String 클래스의 인스턴스로 표현됨
 	그러므로 자바에서의 문자열은 String 클래스의 인스턴스로 처리되며 String 클래스의 멤버(변수, 상수, 메소드)들을 사용할 수 있음
 - String 클래스는 java.leng 패키지에 들어 있으며, java.lang 패키지는 따로 import하지 않아도 사용가능
 - 문자열은 char형 데이터와 다르게 큰 따옴표로 묶어서 사용함

 - 문법
String 인스턴스명 = new String("문자열");			//	정석정인 방법이나 사용하기가 번거로워 실제로는 거의 사용안함
String 인스턴스명 = "문자열";						//	인스턴스이지만 변수처럼 생성할 수 있으며, 문자열 클래스에서만 제공됨

 - 생성자
String(String original) : 지정한 문자열(original)을 String 인스턴스로 생성
String(StringBuffer buffer) : 지정한 StringBuffer를 String 인스턴스로 생성하여 리턴
String(StringBuilder builder) : 지정한 Stringbuilder를 String 인스턴스로 생성하여 리턴

